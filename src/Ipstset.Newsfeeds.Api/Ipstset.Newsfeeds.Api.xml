<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ipstset.Newsfeeds.Api</name>
    </assembly>
    <members>
        <member name="T:Ipstset.Newsfeeds.Api.Attributes.HttpExceptionAttribute">
            <summary>
            Maps an exception to a relevant http status
            </summary>
        </member>
        <member name="T:Ipstset.Newsfeeds.Api.Auth.UI.AccountController">
            <summary>
            This sample controller implements a typical login/logout/provision workflow for local and external accounts.
            The login service encapsulates the interactions with the user data store. This data store is in-memory only and cannot be used for production!
            The interaction service provides a way for the UI to communicate with identityserver for validation and context retrieval
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.AccountController.Login(System.String)">
            <summary>
            Show login page
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.AccountController.Login(Ipstset.Newsfeeds.Api.Auth.UI.LoginInputModel,System.String)">
            <summary>
            Handle postback from username/password login
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.AccountController.ExternalLogin(System.String,System.String)">
            <summary>
            initiate roundtrip to external authentication provider
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.AccountController.ExternalLoginCallback(System.String)">
            <summary>
            Post processing of external authentication
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.AccountController.Logout(System.String)">
            <summary>
            Show logout page
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.AccountController.Logout(Ipstset.Newsfeeds.Api.Auth.UI.LogoutInputModel)">
            <summary>
            Handle logout page postback
            </summary>
        </member>
        <member name="T:Ipstset.Newsfeeds.Api.Auth.UI.ConsentController">
            <summary>
            This controller processes the consent UI
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.ConsentController.Index(System.String)">
            <summary>
            Shows the consent screen
            </summary>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.ConsentController.Index(Ipstset.Newsfeeds.Api.Auth.UI.ConsentInputModel)">
            <summary>
            Handles the consent screen postback
            </summary>
        </member>
        <member name="T:Ipstset.Newsfeeds.Api.Auth.UI.GrantsController">
            <summary>
            This sample controller allows a user to revoke grants given to clients
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.GrantsController.Index">
            <summary>
            Show list of grants
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.GrantsController.Revoke(System.String)">
            <summary>
            Handle postback to revoke a client
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Auth.UI.HomeController.Error(System.String)">
            <summary>
            Shows the error page
            </summary>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Events.EventsController.Get(Ipstset.Newsfeeds.Api.Events.GetEventsModel)">
            <summary>
            Gets all events matching supplied criteria
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Feeds.Posts.FeedsPostsController.Get(System.String,Ipstset.Newsfeeds.Api.Feeds.Posts.GetPostsByFeedModel)">
            <summary>
            Gets all published posts for feed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Feeds.FeedsController.Get(Ipstset.Newsfeeds.Api.Feeds.GetFeedsModel)">
            <summary>
            Gets all feeds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Feeds.FeedsController.Get(System.String)">
            <summary>
            Get feed by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Feeds.FeedsController.Post(Ipstset.Newsfeeds.Api.Feeds.CreateFeedModel)">
            <summary>
            Create new feed
            </summary>
            <param name="request">CreateFeedModel</param>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Feeds.FeedsController.Put(System.String,Ipstset.Newsfeeds.Api.Feeds.UpdateFeedModel)">
            <summary>
            Update feed
            </summary>
            <param name="id"></param>
            <param name="request">UpdateFeedModel</param>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Feeds.FeedsController.Delete(System.String)">
            <summary>
            Delete feed
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Helpers.StringHelper.CreateCamelCaseObjectPath(System.String)">
            <summary>
            Returns the path to an object's property as a camel-cased string, with each nested property camel-cased 
            </summary>
            <param name="path"></param>
            <example></example>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Posts.Publish.PostsPublishController.Patch(System.String)">
            <summary>
            Publish post
            </summary>
            <param name="id"></param>
            <returns>PostResponse</returns>
        </member>
        <member name="M:Ipstset.Newsfeeds.Api.Posts.Unpublish.PostsUnpublishController.Patch(System.String)">
            <summary>
            Unpublish post
            </summary>
            <param name="id"></param>
            <returns>PostResponse</returns>
        </member>
        <member name="M:Ipstset.Newsposts.Api.Posts.PostsController.Get(Ipstset.Newsfeeds.Api.Posts.GetPostsModel)">
            <summary>
            Gets all posts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsposts.Api.Posts.PostsController.Get(System.String)">
            <summary>
            Get post by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsposts.Api.Posts.PostsController.Post(Ipstset.Newsfeeds.Api.Posts.CreatePostModel)">
            <summary>
            Create new post
            </summary>
            <param name="request">CreatePostModel</param>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsposts.Api.Posts.PostsController.Put(System.String,Ipstset.Newsfeeds.Api.Posts.UpdatePostModel)">
            <summary>
            Update post
            </summary>
            <param name="id"></param>
            <param name="request">UpdatePostModel</param>
            <returns></returns>
        </member>
        <member name="M:Ipstset.Newsposts.Api.Posts.PostsController.Delete(System.String)">
            <summary>
            Delete post
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
    </members>
</doc>
